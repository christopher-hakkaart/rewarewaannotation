/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// Pipeline publishing
//
process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

//
// Read QC, trimming and alignment
//
process {
    withName: FASTQC_RAW {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/fastqc/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{html,zip}"
        ]
    }

    withName: TRIMMING {
        ext.args = [
            params.extra_trimgalore_args ? params.extra_trimgalore_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/fastqc/trim" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,zip}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/trimgalore/trim" },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ],
            [
                path: { "${params.outdir}/trimgalore/trim" },
                mode: params.publish_dir_mode,
                pattern: "*.txt",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }

     withName: FASTQC_TRIM {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/fastqc/trim" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{html,zip}"
        ]
    }

    withName: HARD_TRIMMING {
        ext.args = [
            params.extra_trimgalore_hardtrim_args ? params.extra_trimgalore_hardtrim_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/fastqc/hardtrim" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,zip}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/trimgalore/hardtrim" },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ],
            [
                path: { "${params.outdir}/trimgalore/hardtrim" },
                mode: params.publish_dir_mode,
                pattern: "*.txt",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }

    withName: FASTQC_HARDTRIM {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/fastqc/hardtrim" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{html,zip}"
        ]
    }

    withName: STAR_GENOMEGENERATE {
        ext.args = [
            params.extra_star_genomegenerate_args ? params.extra_star_genomegenerate_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/star/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: STAR_ALIGN {
        ext.args = [
            "--outSAMtype BAM SortedByCoordinate",
            params.extra_star_align_args ? params.extra_star_align_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/star/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: PICARD_COLLECTALIGNMENTSUMMARYMETRICS {
        ext.args = [
            params.extra_picard_alignment_metrics_args ? params.extra_picard_alignment_metrics_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/picard/alignment-metrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
