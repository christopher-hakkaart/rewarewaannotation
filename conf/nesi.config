/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for running Nextflow on the Sonic HPC with a slurm schedular
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Assumes HPC using Slurm schedular, through which all jobs will be submitted
    and run.
    NB. This is a generic config that works for the NeSI HPC and is not
    intended to work for every cluster, rather to serve as an example. Please
    refer to Nextflow documentation and github.com/nf-core/configs for more
    information and examples of how to configure Nextflow for your cluster.
----------------------------------------------------------------------------------------
*/

params {
  config_profile_description = 'NeSI HPC cluster profile'
  config_profile_contact     = 'Natalie Forsdick (GitHub: @natforsdick)'
  config_profile_url         = 'https://nesi.org.nz'
  max_cpus                   = 64
  max_time                   = '336.h'
  singularity_dir            = '/opt/nesi/CS400_centos7_bdw/Singularity/3.11.3/bin/singularity/'
  schema_ignore_params       = 'singularity_dir'
}

executor {
    queueSize                = 20
    submitRateLimit          = '10 sec'
    jobName                  =  { "$task.hash" }
}

singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    conda.enabled          = false
    docker.enabled         = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    apptainer.enabled      = false
    }

process {
    executor                   = 'slurm'
    maxRetries                 = 2
    beforeScript               = 'module load Singularity/3.11.3'

    // Adjust default resource allocations
    cpus   = { check_max( 1     * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB  * task.attempt, 'memory' ) }
    time   = { check_max( 24.h  * task.attempt, 'time'   ) }

    // Process-specific resource requirements
    withLabel: 'process_single' {
        cpus   = { check_max( 1                   , 'cpus'    ) }
        memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel: 'process_low' {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel: 'process_medium' {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withLabel: 'process_high' {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 96.h  * task.attempt, 'time'    ) }
    }
    withLabel: 'process_long' {
      time   = { check_max( 168.h  * factor(task, 1),  'time' ) }
    }
}
