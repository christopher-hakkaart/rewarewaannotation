/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for running Nextflow on the Sonic HPC with a slurm schedular
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Assumes HPC using Slurm schedular, through which all jobs will be submitted
    and run.
    NB. This is a generic config that works for the UCD Sonic HPC and is not
    intended to work for every cluster, rather to serve as an example. Please
    refer to Nextflow documentation and github.com/nf-core/configs for more
    information and examples of how to configure Nextflow for your cluster.
----------------------------------------------------------------------------------------
*/

params {
  config_profile_description = 'NeSI HPC cluster profile'
  config_profile_contact     = 'Natalie Forsdick (GitHub: @natforsdick)'
  config_profile_url         = 'https://nesi.org.nz'
  max_cpus                   = 44
  max_time                   = '336.h'
  singularity_dir            = '/opt/nesi/CS400_centos7_bdw/Singularity/3.11.3/bin/singularity/'
  schema_ignore_params       = 'singularity_dir'
}

executor {
    queueSize                = 20
    submitRateLimit          = '5 sec'
    jobName                  =  { "$task.hash" }
}

singularity {
    enabled                  = true
    autoMounts               = true
    cacheDir                 = params.singularity_dir
}

process {
    executor                   = 'slurm'
    maxRetries                 = 2
    beforeScript               = 'module load Singularity/3.11.3'
}

process {
    executor                   = 'slurm'
    maxRetries                 = 2
    beforeScript               = 'module load Singularity/3.11.3'

    // Adjust default resource allocations
    cpus     = { check_max( 1     * factor(task, 2),  'cpus'   ) }
    time     = { check_max( 24.h  * factor(task, 1),  'time'   ) }

    // Process-specific resource requirements
    withLabel: 'process_single' {
      cpus   = { check_max( 1     * factor(task, 2),  'cpus'   ) }
      time   = { check_max( 4.h  * factor(task, 1),  'time'   ) }
    }
    withLabel: 'process_low' {
      cpus   = { check_max( 2     * factor(task, 2),  'cpus'   ) }
      time   = { check_max( 12.h  * factor(task, 1),  'time'   ) }
    }
    withLabel: 'process_medium' {
      cpus   = { check_max( 8     * factor(task, 2),  'cpus'   ) }
      time   = { check_max( 48.h  * factor(task, 1),  'time'   ) }
    }
    withLabel: 'process_high' {
      cpus   = { check_max( 16    * factor(task, 2),  'cpus'   ) }
      time   = { check_max( 96.h  * factor(task, 1),  'time'   ) }
    }
    withLabel: 'process_long' {
      time   = { check_max( 168.h  * factor(task, 1),  'time'   ) }
    }
}
